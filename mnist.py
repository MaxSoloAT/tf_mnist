# -*- coding: utf-8 -*-
"""mnist

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1imMRL0slkcZmiRceoRKnVK7d9dhw5kpj
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test,y_test) = mnist.load_data()
plt.imshow(x_train[10], cmap = plt.cm.binary)
plt.show()
print(y_train[10])
# завантаження мніста, x_train[10]/y_train[10] - замінивши 10 на інше число 
# отримаємо зображення іншої цифри (від 0 до 9).
# x_train/x_test - зображення,  y_train/y_test "назви"

x_train = tf.keras.utils.normalize(x_train, axis = 1)
x_test = tf.keras.utils.normalize(x_test, axis = 1)
# нормалізація зображення (значення [0-255] --> [0-1]) 
plt.imshow(x_train[10], cmap = plt.cm.binary)
plt.show()
#print(x_train[10])

model = tf.keras.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(256, tf.nn.relu))
model.add(tf.keras.layers.Dense(128, tf.nn.relu))
model.add(tf.keras.layers.Dense(10, tf.nn.softmax))

model.compile(optimizer="adam",
              loss='sparse_categorical_crossentropy',
              metrics =['accuracy']
              )

model.summary() # Модель мережі

history = model.fit(x_train, y_train, epochs=5)

def plot_graphs(history, metric): # функція для графіків наведених внизу
  plt.plot(history.history[metric])
  #plt.plot(history.history['var_'+ metric], '')
  plt.xlabel("Epochs")
  plt.ylabel(metric)
  plt.legend([metric, metric])
  plt.show()

loss, acc = model.evaluate(x_test,y_test) # Інформація про точність

plot_graphs(history, 'accuracy')
plot_graphs(history, 'loss')

pred = model.predict(x_test)

# Результат... x_res вільно можна змінювати 
x_res = 11
print ("So it is: {:5.0f}".format(np.argmax(pred[x_res])) )
plt.imshow(x_test[x_res], cmap = plt.cm.binary)
plt.show()